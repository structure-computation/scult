import "pattern.met"
   
class Data_isotropy
#elemdata := ElemData()
    E := symbol("field_structure_compact->group_elements[i_group].mat_prop[0][i_elem]")
    nu := symbol("field_structure_compact->group_elements[i_group].mat_prop[1][i_elem]")
    rho := symbol("field_structure_compact->group_elements[i_group].mat_prop[3][i_elem]")
    
class Data_orthotropy
    E11 := symbol("field_structure_compact->group_elements[i_group].mat_prop[14][i_elem]")
    E22 := symbol("field_structure_compact->group_elements[i_group].mat_prop[15][i_elem]")
    E33 := symbol("field_structure_compact->group_elements[i_group].mat_prop[16][i_elem]")
    nu12 := symbol("field_structure_compact->group_elements[i_group].mat_prop[20][i_elem]")


# écriture des fichier
# ----------------------------------------------------------------------------------------------------------

def write_head_FieldStructureCompactGen_operators_h( fout )
    fout <<<<
        // generated file
        // 
        #include <iostream>
        #include <fstream>
        #include <cassert> 
        #include <Metil/BasicVec.h>
        #include <Metil/StructCompactor.h>
        #include <Metil/CudaMetil.h>
        #include "GeometryCompactClass.h"
        #include "FieldStructureCompactClass.h"
        using namespace Metil;
        /// Fonctions inline (travaillant sur un motif) et global (travaillant sur une liste de motif sur GPU) permettant de calculer le centre d'un element dans les group_elements
    

def write_FieldStructureCompactGen_operators_h( pattern, fout, Type_comp, num_comp  )
    fout <<<<
        //for pattern $(pattern.name )
        __inline__ void calculate_elements_operator_$(pattern.id )_$(num_comp)(GeometryCompactClass *geometry_compact, FieldStructureCompactClass *field_structure_compact ,int i_group, int i_elem);
        __global__ void global_calculate_elements_operator_$(pattern.id )_$(num_comp)(GeometryCompactClass *geometry_compact_GPU, FieldStructureCompactClass *field_structure_compact_GPU, int i_group, int i_grid, int sizeGrid, int nb_elements);
        void global_calculate_elements_operator_$(pattern.id )_$(num_comp)_CPU(GeometryCompactClass *geometry_compact_CPU, FieldStructureCompactClass *field_structure_compact_CPU, int i_group);
    


def write_head_FieldStructureCompactGen_operators_cu( fout )
    fout <<<<
        // generated file
        // 
        #include "FieldStructureCompactGen_operators.h"
    

def write_inline_calculate_elements_operators( pattern, fout, Type_comp, num_comp  )
    cw := CodeWriterAlt()
    ener := pattern.calculate_energy_isotropy(Data_isotropy())
    K:=pattern.calculate_rigidity_matrix_of_linear_step(ener)
    dim_matrix := pattern.nb_nodes*pattern.dim
    cw_iso := CodeWriterAlt()
    for i in 0 .. dim_matrix
        for j in 0 .. i + 1
            # cw_iso.add( "K[ns+sst_s*pos_in_K[$(i*(i+1)/2+j)+$(dim_matrix*(dim_matrix+1)/2)*num_elem]]", K( i, j ), add )
            cw_iso.add( "field_structure_compact->group_elements[i_group].K[$(i*(i+1)/2+j)][i_elem]", K( i, j ), add )
    fout <<<< 
        // ecriture de la matrice de rigidite par EF pour le comportement : $Type_comp
        __inline__ void calculate_elements_operators_$(pattern.id )_$(num_comp )(GeometryCompactClass *geometry_compact, FieldStructureCompactClass *field_structure_compact ,int i_group, int i_elem){ 
                $(cw_iso.to_string( 8 ))
        }
    
def write_global_calculate_elements_operators_GPU( pattern, fout, Type_comp, num_comp  )
    fout <<<<
        __global__ void global_calculate_elements_operators_$(pattern.id )_$(num_comp)(GeometryCompactClass *geometry_compact_GPU, FieldStructureCompactClass *field_structure_compact_GPU, int i_group, int i_grid, int sizeGrid, int nb_elements){
            int i_elem = i_grid * sizeGrid * blockDim.x + blockIdx.x * blockDim.x + threadIdx.x;
            if(i_elem <nb_elements){
                calculate_elements_operators_$(pattern.id )_$(num_comp)(geometry_compact_GPU, field_structure_compact_GPU, i_group, i_elem);
            }
        }
    
def write_global_calculate_elements_operators_CPU( pattern, fout, Type_comp, num_comp  )
    fout <<<<
        void global_calculate_elements_operators_$(pattern.id )_$(num_comp)_CPU(GeometryCompactClass *geometry_compact_CPU, FieldStructureCompactClass *field_structure_compact_CPU, int i_group){
            for(int i_elem=0; i_elem<geometry_compact_CPU->group_elements[i_group].nb_elements ; i_elem++)
                calculate_elements_operators_$(pattern.id )_$(num_comp)(geometry_compact_CPU, field_structure_compact_CPU, i_group, i_elem);
        }

    

#------------------------------------------------
# appel des fonctions pour la génération du code
# -----------------------------------------------

# Type_comp := ["isotrope", "orthotrope"]
Type_comp := ["isotrope"]

file_generate_h := File( "../src/COMPUTE/FieldStructureCompactGen_operators.h", "w" )
file_generate_cu := File( "../src/COMPUTE/FieldStructureCompactGen_operators.cu", "w" )

write_head_FieldStructureCompactGen_operators_h( file_generate_h )
write_head_FieldStructureCompactGen_operators_cu( file_generate_cu )

num_comp := 0
for comp in Type_comp 
    for type in type_patterns
        print "Pattern "+type
        pattern := Pattern[ type ]()
        write_FieldStructureCompactGen_operators_h( pattern, file_generate_h, comp, num_comp )
        pattern.def_pos_nodes_elem_motif("i_group", "i_elem")
        pattern.define_vars("i_group", "i_elem") 
        write_inline_calculate_elements_operators( pattern, file_generate_cu, comp, num_comp )
        write_global_calculate_elements_operators_GPU( pattern, file_generate_cu, comp, num_comp )
        write_global_calculate_elements_operators_CPU( pattern, file_generate_cu, comp, num_comp )
    num_comp += 1







