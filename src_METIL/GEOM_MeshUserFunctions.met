import "pattern.met"


# entete du fichier
# ----------------------------------------------------------------------------------------------------------
def generate_entete( fout )
    fout <<<< 
        //
        // Description: fichier généré par GEOM_MESH_USER_FUNCTIONS.met 
        //
        //
        // Author: Jeremie Bellec <j.bellec@structure-computation.com>, (C) 2011
        //
        // Copyright: See COPYING file that comes with this distribution
        //
        //
        
        #include "MeshUser.h"
        
        using namespace Metil;
    

# changer la connectivité en fonction du jacobien des triangle
# ----------------------------------------------------------------------------------------------------------
def generate_change_mesh_connectivity( type_patterns, fout )
    fout <<<<        
        // changement de la connectivité d'un element du maillage ---------------------------------------------------------------
        void MeshUser::change_mesh_connectivity(int i_elem) { 
            switch (list_elements[i_elem].pattern_base_id){
    num_type := 0
    for type_pattern in type_patterns
        info type_pattern
        pattern := Pattern[ type_pattern ]()
        for d in 0 .. pattern.dim
            for i in 0 .. pattern.elem.points.size
                pattern.elem.pos_nodes[i][d] = symbol("mesh_pos_nodes[$d][list_elements[i_elem].mesh_connectivity[$i]]")
        fout <<<<
                    //pour le element $(pattern.name )
                    case $(pattern.id ) :{
                        list_elements[i_elem].jacobien = $(pattern.elem.jac.subs( pattern.elem.var_inter, pattern.elem.get_center_of_var_inter() )) ;
                    }
                    break;
    fout <<<< 
            }
            if(list_elements[i_elem].jacobien<0){
                BasicVec<int> current_connectivity;
                current_connectivity.resize(list_elements[i_elem].mesh_connectivity.size(),-1);
                //PRINT(list_elements[i_elem].mesh_connectivity.size());
                //PRINT(patterns.find_type(list_elements[i_elem].pattern_base_id).permutation);
                for(int i=0; i<list_elements[i_elem].mesh_connectivity.size(); i++){
                    current_connectivity[i] = list_elements[i_elem].mesh_connectivity[patterns.find_type(list_elements[i_elem].pattern_base_id).permutation[i]]; 
                }
                list_elements[i_elem].mesh_connectivity = current_connectivity;
            }
    fout <<< "}"


# création des interfaces par comparaison des numéro des noeuds des children
# ----------------------------------------------------------------------------------------------------------
def generate_create_list_interface(type_patterns, fout )
    fout <<<<        
        // création des interfaces par comparaison des numéro des noeuds des children ---------------------------------------------------------------
        // ------------------------------------------------------------------------------------------------------------------------------------------
        void MeshUser::create_list_interfaces(int i_elem) { 
            switch (list_elements[i_elem].pattern_base_id){
    num_type := 0
    for type_pattern in type_patterns
        info type_pattern
        pattern := Pattern[ type_pattern ]()
        fout <<<<
                    //pour le element $(pattern.name ) ----------------------------
                    case $(pattern.id ) :{
                        BasicVec<int,$(pattern.nb_nodes_side)> num_node;    
                        int num_side;
                        bool add_I;
    
        num_side := 0
        info pattern.nb_sides
        for side in pattern.side_elem
            num_node := side[1]
            info num_node
            fout <<< "    " 
            fout <<< "            num_side = " << num_side << ";"
            for d in 0 .. pattern.nb_nodes_side
                fout <<< "            num_node[$d] = list_elements[i_elem].mesh_connectivity[" << num_node[d] << "];"
            
            num_side += 1
            fout <<<<
                            add_I = true;
                            //for(int i=0; i<list_interfaces.size(); i++){
                            for(int ii=0; ii<list_interfaces_type_0.size(); ii++){
                                int i = list_interfaces_type_0[ii];
                                //if(list_interfaces[i].mesh_type != 0){}
                                //else{
                                    bool find_inter = true;
                                    BasicVec<int> current_repnode;
                                    for(int i_node=0; i_node<$(pattern.nb_nodes_side); i_node++){
                                        bool find_node = false;
                                        for(int i_connect=0; i_connect<$(pattern.nb_nodes_side); i_connect++){
                                            if(num_node[i_node] == list_interfaces[i].mesh_connectivity[i_connect]){
                                                current_repnode.push_back(i_connect);
                                                find_node = true;
                                                break;
                                            }
                                        }
                                        if(!find_node){
                                            find_inter = false;
                                            break;
                                        }
                                    }
                                    if(find_inter){
                                        add_I = false;
                                        list_interfaces[i].add_side(i_elem, num_side, list_elements);
                                        list_elements[i_elem].interfaces_global_num[num_side] = list_interfaces[i].id;

            if(type_pattern == Tetra)
                fout <<<< 
                                            BasicVec<int, 6> repnode_test(0,1,2,3,4,5);
                                            BasicVec<int, 6> repnode_0(0,2,1,5,4,3);
                                            BasicVec<int, 6> repnode_1(1,0,2,3,5,4);
                                            BasicVec<int, 6> repnode_2(2,1,0,4,3,5);
                                            
                                            BasicVec<int, 6> repnode;
                                            if(current_repnode[0]==0){repnode = repnode_0;}
                                            if(current_repnode[0]==1){repnode = repnode_1;}
                                            if(current_repnode[0]==2){repnode = repnode_2;}
                                            list_interfaces[i].correspondance_between_nodes=repnode;

                        
            if(type_pattern == Tetra_10)
                fout <<<< 
                                            list_interfaces[i].correspondance_between_nodes=current_repnode;
            fout <<<<             
                                        list_interfaces_type_0.remove_unordered(ii);
                                        break;
            fout <<<< 
                                    }
            fout <<<< 
                                //}
            fout <<<<
                            }
                            if(add_I){
            if(type_pattern == Tetra_10)
                fout <<<< 
                                    BasicVec<int, 6> repnode(0,2,1,5,4,3);
            if(type_pattern == Tetra)
                fout <<<< 
                                    BasicVec<int, 6> repnode(0,2,1,5,4,3);
            if(type_pattern == Triangle_6)
                fout <<<< 
                                    BasicVec<int, 3> repnode(1,2,0);
            if(type_pattern == Triangle)
                fout <<<< 
                                    BasicVec<int, 3> repnode(1,2,0);
            fout <<<<
                                EntityInterfaceUser current_interface(nb_interfaces, -1, num_node, i_elem, num_side, list_elements[i_elem].num_piece_in_mesh, repnode);
                                list_interfaces.push_back(current_interface);
                                list_elements[i_elem].interfaces_global_num[num_side] = nb_interfaces;
                                list_interfaces_type_0.push_back(nb_interfaces);
                                nb_interfaces = nb_interfaces + 1;
            fout <<<<
                            } 
        fout <<<<
                    }
                    break;
    fout <<<<
            } 
    fout <<<<
        } 



# changer la connectivité en fonction du jacobien des triangle
# ----------------------------------------------------------------------------------------------------------
def generate_create_list_pattern( type_patterns, cible_patterns, fout )
    fout <<<<        
        // création des patterns à partir des éléments du maillage  ---------------------------------------------------------------------------------
        // ------------------------------------------------------------------------------------------------------------------------------------------
        void MeshUser::create_list_elements(int i_elem) { 
            switch (list_elements[i_elem].pattern_base_id){

    num_type := 0
    for i_pattern in 0..type_patterns.size
        type_pattern := type_patterns[i_pattern]
        cible_pattern := cible_patterns[i_pattern]
        info type_pattern
        info cible_pattern
        pattern_base := Pattern[ type_pattern ]()
        #position des noeuds de l'element de base
        for d in 0 .. pattern_base.dim
            for i in 0 .. pattern_base.elem.points.size
                pattern_base.elem.pos_nodes[i][d] = symbol("mesh_pos_nodes[$d][list_elements[i_elem].mesh_connectivity[$i]]")
        #position des noeuds du pattern cible
        pattern_cible := Pattern[ cible_pattern ]()
        nodes := cible_pattern::points
        for p in 0 .. pattern_cible.elem.points.size
            pattern_cible.elem.pos_nodes[ p ] = pattern_base.elem.pos.subs( pattern_base.elem.var_inter, nodes[ p ] )

        fout <<<<
                    //de l'element $(pattern_base.name ) vers $(pattern_cible.name )----------------------------
                    case $(pattern_base.id ) :{
                        BasicVec< int > element_connectivity;
                        element_connectivity.resize($(pattern_cible.elem.points.size));
        for p in 0 .. pattern_cible.elem.points.size
            fout <<<<
                            element_connectivity[$p] = elements_pos_nodes[0].size();
            for d in 0 .. pattern_cible.dim
                fout <<<<
                                elements_pos_nodes[$d].push_back($(pattern_cible.elem.pos_nodes[p][d]));
            
        fout <<<<
                        list_elements[i_elem].define_element(i_elem, element_connectivity, $(pattern_cible.id));
        fout <<<<
                    }
                    break;
    fout <<<<
                }
    fout <<< "}"




# apelle des fonction pour la génération du code
# ----------------------------------------------------------------------------------------------------------
#type_patterns est définit des pattern.met

fout := File( "../src/GEOMETRY/code_genere/MeshUserFunctions.cpp", "w" )
generate_entete( fout )
generate_change_mesh_connectivity( type_patterns, fout )
generate_create_list_interface(type_patterns,  fout )
generate_create_list_pattern(type_patterns, cible_patterns, fout )



